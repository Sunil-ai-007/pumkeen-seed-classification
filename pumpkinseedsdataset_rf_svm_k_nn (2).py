# -*- coding: utf-8 -*-
"""PumpkinSeedsDataset.RF.SVM.K-NN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IBc2k3oD9Pl60wmb4q5ofxwe4zfSN9kF
"""

import pandas as pd

Pumpkin_Seeds_Dataset = pd.read_excel("Pumpkin_Seeds_Dataset.xlsx")

Pumpkin_Seeds_Dataset.head()

Pumpkin_Seeds_Dataset["Class"].replace({"Çerçevelik":0,"Ürgüp Sivrisi":1},inplace=True)

Pumpkin_Seeds_Dataset.shape

# Data Quality Check

Pumpkin_Seeds_Dataset.info()

Pumpkin_Seeds_Dataset.corr()

Pumpkin_Seeds_dataset_2 = Pumpkin_Seeds_Dataset.drop(["Area", "Perimeter","Convex_Area","Roundness","Aspect_Ration"], axis = 1)

Pumpkin_Seeds_dataset_2.corr()

Pumpkin_Seeds_dataset_2.shape

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split

y = Pumpkin_Seeds_dataset_2["Class"]

x = Pumpkin_Seeds_dataset_2[["Major_Axis_Length","Minor_Axis_Length","Equiv_Diameter","Eccentricity","Solidity","Extent","Compactness"]]

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.20)

x_train.shape

y_test.shape

x_test.shape

# Random Forest Model Building

import sklearn.ensemble

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, ConfusionMatrixDisplay
from sklearn.model_selection import RandomizedSearchCV, train_test_split
from scipy.stats import randint
from sklearn.metrics import f1_score, confusion_matrix, classification_report
import numpy as np

Pumpkin_Seeds_dataset_model = RandomForestClassifier(criterion='gini', n_estimators=5000, random_state=1, n_jobs=2)

Pumpkin_Seeds_dataset_model = RandomForestClassifier()

Pumpkin_Seeds_dataset_model.fit( x_train, y_train )

Pumpkin_Seeds_dataset_model_pred = Pumpkin_Seeds_dataset_model.predict(x_test)

y_pred = np.where(Pumpkin_Seeds_dataset_model_pred > 0.50, 1, 0)
print(y_pred)

print('Accuracy: %.3f' % accuracy_score(y_test, y_pred))

print(confusion_matrix(y_test, y_pred))

print(classification_report(y_test, y_pred))

from sklearn.tree import export_graphviz
from IPython.display import Image
import graphviz

for i in range(3):
    tree = Pumpkin_Seeds_dataset_model.estimators_[i]
    Pumpkin_Seeds_data = export_graphviz(tree, feature_names=x_train.columns, filled=True, max_depth=2, impurity=False, proportion=True)
    graph = graphviz.Source(Pumpkin_Seeds_data)
    display(graph)

mean_Major_Axis_Length = Pumpkin_Seeds_dataset_2 ['Major_Axis_Length'].mean()

mean_Minor_Axis_Length = Pumpkin_Seeds_dataset_2 ['Minor_Axis_Length'].mean()

mean_Equiv_Diameter = Pumpkin_Seeds_dataset_2 ['Equiv_Diameter'].mean()

mean_Eccentricity = Pumpkin_Seeds_dataset_2 ['Eccentricity'].mean()

mean_Solidity = Pumpkin_Seeds_dataset_2 ['Solidity'].mean()

mean_Extent = Pumpkin_Seeds_dataset_2 ['Extent'].mean()

mean_Compactness = Pumpkin_Seeds_dataset_2 ['Compactness'].mean()

min(Pumpkin_Seeds_dataset_2['Major_Axis_Length'])

max(Pumpkin_Seeds_dataset_2['Major_Axis_Length'])

#Simulation of the Random Forest Model

Pumpkin_Seeds_dataset_model.predict([[ 340.84 , mean_Minor_Axis_Length, mean_Equiv_Diameter, mean_Eccentricity, mean_Solidity,mean_Extent,mean_Compactness]])

Pumpkin_Seeds_dataset_model.predict([[ 400.20 , mean_Minor_Axis_Length, mean_Equiv_Diameter, mean_Eccentricity, mean_Solidity,mean_Extent,mean_Compactness]])

Pumpkin_Seeds_dataset_model.predict([[ 420.86 , mean_Minor_Axis_Length, mean_Equiv_Diameter, mean_Eccentricity, mean_Solidity,mean_Extent,mean_Compactness]])

Pumpkin_Seeds_dataset_model.predict([[ 460.26 , mean_Minor_Axis_Length, mean_Equiv_Diameter, mean_Eccentricity, mean_Solidity,mean_Extent,mean_Compactness]])

Pumpkin_Seeds_dataset_model.predict([[ 500.46 , mean_Minor_Axis_Length, mean_Equiv_Diameter, mean_Eccentricity, mean_Solidity,mean_Extent,mean_Compactness]])

Pumpkin_Seeds_dataset_model.predict([[ 530.66 , mean_Minor_Axis_Length, mean_Equiv_Diameter, mean_Eccentricity, mean_Solidity,mean_Extent,mean_Compactness]])

Pumpkin_Seeds_dataset_model.predict([[ 660.86 , mean_Minor_Axis_Length, mean_Equiv_Diameter, mean_Eccentricity, mean_Solidity,mean_Extent,mean_Compactness]])

# Support Vector Machine Building

import sklearn.svm

Pumpkin_Seeds_dataset_model_SVM = sklearn.svm.SVC( kernel = 'linear')

Pumpkin_Seeds_dataset_model_SVM.fit(x_train, y_train)

y_predicted = Pumpkin_Seeds_dataset_model_SVM.predict( x_test)

print('Accuracy: %.3f' % accuracy_score(y_test, y_predicted))

print(confusion_matrix(y_test, y_predicted))

print(classification_report(y_test, y_predicted))

# Data Visualization with Python

sns.scatterplot(x= Pumpkin_Seeds_dataset_2['Major_Axis_Length'],y=Pumpkin_Seeds_dataset_2['Minor_Axis_Length'], hue=Pumpkin_Seeds_dataset_2['Class'])

sns.scatterplot(x= Pumpkin_Seeds_dataset_2['Equiv_Diameter'],y=Pumpkin_Seeds_dataset_2['Eccentricity'], hue=Pumpkin_Seeds_dataset_2['Class'])

sns.scatterplot(x= Pumpkin_Seeds_dataset_2['Compactness'],y=Pumpkin_Seeds_dataset_2['Extent'], hue=Pumpkin_Seeds_dataset_2['Class'])

# K-NN classification model

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=25)

knn.fit(x_train, y_train)

knn.score(x_test, y_test)

y_predicted_knn = knn.predict(x_test)

cm = confusion_matrix(y_test, y_predicted_knn)

print(classification_report(y_test, y_predicted_knn))